from tkinter import *
from functools import partial #to prevent unwanted buttons

class Converter:
    """
    Temperature conversion tool (C to F or F to C)
    """

    def __init__(self):
        """
        Temperature converter GUI
        """

        self.all_calculations_list = ['10.0F is -12C', '20F is -7C',
                                      '30F is -1C', '40F is 4C',
                                      '50F is 10C', '60F is 16C']

        self.temp_frame = Frame(padx = 10, pady = 10)
        self.temp_frame.grid()

        self.to_history_button = Button(self.temp_frame,
                                        text = "History / Export",
                                        bg = "CC6600",
                                        fg = "#FFFFFF",
                                        font = ("Arial", "14", "bold"), width = 12,
                                        command = self.to_history)
        self.to_history_button.grid(row = 1, padx = 5, pady = 5)

    def to_history(self):
        """
        Opens history dialogue box and disables history button
        (so that users cant create multiple history boxes).
        """
        HistoryExport(self, self.all_calculations_list)

class HistoryExport:
    """
    displays history dialogue box
    """
    def __init__(self, partner):
        #setup dialogue box and background colour

        green_back = "#D5E8D4"
        peach_back = "#ffe6cc"

        self.history_box = Toplevel()

        #disable history button
        partner.to_history_button.config(state = DISABLED)

        #if users press cross at top, closes history and
        #releases history button
        self.history_box.protocol('WM_DELETE_WINDOW',
                                   partial(self.close_history, partner))
        
        self.history_frame = Frame(self.history_box)
        self.history_frame.grid()

        #strings for 'long' labels
        recent_intro_txt = ("Below are your recent calculations - showing "
                            "3 / 3 calculations. All calculations are "
                            "shown to the nearest degree")

        export_instructions_txt = ("Please push <Export> to save your calculations in text "
                                   "file. If the filename already exists, it will be replaced")

        calculations = ""

        #Label list (label text | format | bg)
        history_label_list = [
            ["History / Export", ("Arial", "16", "bold"), None],
            [recent_intro_txt, ("Arial", "11"), None],
            ["calculation list", ("Arial", "14"), green_back],
            [export_instructions_txt, ("Arial", "11"), None]
        ]

        history_label_ref = []
        for count, item in enumerate(history_label_list):
            make_label = Label(self.history_box, text = item[0], font = item[1],
                                bg = item[2],
                                wraplength = 300, justify = "left", pady = 10, padx = 20)
            make_label.grid(row = count)

            history_label_ref.append(make_label)

        #retrieve export instruction label so that we can configure it to show the file name if the user
        #exports the file
        self.export_filename_label = history_label_ref[3]

        #make frame to hold button (2 columns)
        self.hist_button_frame = Frame(self.history_box)
        self.hist_button_frame.grid(row = 4)

        

        button_detail_list = [
            ["Export", "#004C99", "", 0, 0],
            ["Close", "#666666", partial(self.close_history, partner), 0, 1],
        ]

        for btn in button_detail_list:
            self.make_button = Button(self.hist_button_frame,
                                      font = ("Arial", "12", "bold"),
                                      text = btn[0], bg = [1],
                                      fg = "#FFFFFF", width = 12,
                                      command = btn[2])
        self.make_button.grid(row = btn[3], column = btn[4], padx = 12, pady = 10)

    def close_history(self, partner):
        """
        closes history dialogue and enables history button

        """
        partner.to_history_button.config(state = NORMAL)
        self.history_box.destroy()
                
if __name__ == "__main":
    root = Tk()
    root.title("Temperature Converter")
    Converter()
    root.mainloop()
        
